<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.css">
    <style>
        .dashboard-card {
            transition: transform 0.2s;
        }
        .dashboard-card:hover {
            transform: translateY(-2px);
        }
        .status-badge {
            font-size: 0.8rem;
        }
        .metric-card {
            border-left: 4px solid;
        }
        .metric-card.success { border-left-color: #28a745; }
        .metric-card.warning { border-left-color: #ffc107; }
        .metric-card.danger { border-left-color: #dc3545; }
        .metric-card.info { border-left-color: #17a2b8; }
        
        .progress-stacked {
            height: 20px;
        }
        
        .execution-row {
            transition: background-color 0.3s;
        }
        .execution-row:hover {
            background-color: #f8f9fa;
        }
        
        .runner-status-healthy { color: #28a745; }
        .runner-status-unhealthy { color: #dc3545; }
        .runner-status-unknown { color: #6c757d; }
        
        .auto-refresh {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            margin: 20px 0;
        }
    </style>
</head>
<body class="bg-light">
    <nav class="navbar navbar-dark bg-dark">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h1">
                <i class="bi bi-gear-wide-connected"></i> Enhanced Orchestration Dashboard
            </span>
            <div class="auto-refresh">
                <button id="refreshBtn" class="btn btn-outline-light btn-sm">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                </button>
                <span id="autoRefreshStatus" class="text-light ms-2">Auto-refresh: <span class="text-success">ON</span></span>
            </div>
        </div>
    </nav>

    <div class="container-fluid py-4">
        <!-- System Overview -->
        <div class="row mb-4">
            <div class="col-12">
                <h2><i class="bi bi-speedometer2"></i> System Overview</h2>
            </div>
        </div>

        <!-- Key Metrics Row -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card metric-card success dashboard-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Active Runners</h6>
                                <h3 class="mb-0" id="activeRunners"><%= runnerSummary.active || 0 %></h3>
                                <small class="text-success">
                                    <%= runnerSummary.healthy || 0 %> healthy
                                </small>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-cpu text-success" style="font-size: 2rem;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3">
                <div class="card metric-card info dashboard-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Queue Status</h6>
                                <h3 class="mb-0" id="queuedExecutions"><%= queueSummary.total_queued || 0 %></h3>
                                <small class="text-info">
                                    <%= queueSummary.running || 0 %> running
                                </small>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-list-task text-info" style="font-size: 2rem;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3">
                <div class="card metric-card warning dashboard-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Active Jobs</h6>
                                <h3 class="mb-0" id="activeJobs"><%= runnerSummary.total_active_jobs || 0 %></h3>
                                <small class="text-warning">
                                    of <%= runnerSummary.total_capacity || 0 %> capacity
                                </small>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-activity text-warning" style="font-size: 2rem;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-3">
                <div class="card metric-card danger dashboard-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">24h Executions</h6>
                                <h3 class="mb-0" id="executions24h"><%= systemMetrics.executions_24h || 0 %></h3>
                                <small class="text-muted">
                                    Avg: <%= Math.round(systemMetrics.avg_execution_time || 0) %>s
                                </small>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-graph-up text-danger" style="font-size: 2rem;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card dashboard-card">
                    <div class="card-header">
                        <h5><i class="bi bi-bar-chart"></i> Execution Queue Trends</h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="queueTrendsChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card dashboard-card">
                    <div class="card-header">
                        <h5><i class="bi bi-pie-chart"></i> Runner Utilization</h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="runnerUtilizationChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Execution Queue and Runner Status -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card dashboard-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5><i class="bi bi-list-ul"></i> Execution Queue</h5>
                        <button class="btn btn-outline-primary btn-sm" onclick="refreshQueue()">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="queueTable">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Execution ID</th>
                                        <th>Test Suite</th>
                                        <th>Environment</th>
                                        <th>Priority</th>
                                        <th>Status</th>
                                        <th>Queue Time</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="queueTableBody">
                                    <!-- Queue data will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card dashboard-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5><i class="bi bi-servers"></i> Test Runners</h5>
                        <button class="btn btn-outline-primary btn-sm" onclick="refreshRunners()">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="runnersList">
                            <!-- Runner data will be populated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Active Executions -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card dashboard-card">
                    <div class="card-header">
                        <h5><i class="bi bi-play-circle"></i> Active Executions</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Regular Executions</h6>
                                <div id="regularExecutions">
                                    <!-- Regular executions will be populated by JavaScript -->
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6>Parallel Executions</h6>
                                <div id="parallelExecutions">
                                    <!-- Parallel executions will be populated by JavaScript -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Resource Utilization -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card dashboard-card">
                    <div class="card-header">
                        <h5><i class="bi bi-memory"></i> Resource Utilization</h5>
                    </div>
                    <div class="card-body">
                        <div id="resourceUtilization">
                            <!-- Resource utilization will be populated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    
    <script>
        // Global state
        let autoRefresh = true;
        let refreshInterval;
        let queueTrendsChart;
        let runnerUtilizationChart;

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            loadDashboardData();
            startAutoRefresh();
            
            // Setup refresh button
            document.getElementById('refreshBtn').addEventListener('click', function() {
                loadDashboardData();
            });
        });

        // Auto-refresh functionality
        function startAutoRefresh() {
            refreshInterval = setInterval(loadDashboardData, <%= refreshInterval || 5000 %>);
        }

        function stopAutoRefresh() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
                refreshInterval = null;
            }
        }

        function toggleAutoRefresh() {
            if (autoRefresh) {
                stopAutoRefresh();
                document.getElementById('autoRefreshStatus').innerHTML = 'Auto-refresh: <span class="text-danger">OFF</span>';
            } else {
                startAutoRefresh();
                document.getElementById('autoRefreshStatus').innerHTML = 'Auto-refresh: <span class="text-success">ON</span>';
            }
            autoRefresh = !autoRefresh;
        }

        // Initialize charts
        function initializeCharts() {
            // Queue trends chart
            const queueCtx = document.getElementById('queueTrendsChart').getContext('2d');
            queueTrendsChart = new Chart(queueCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Queued',
                        data: [],
                        borderColor: '#ffc107',
                        backgroundColor: 'rgba(255, 193, 7, 0.1)',
                        fill: true
                    }, {
                        label: 'Running',
                        data: [],
                        borderColor: '#28a745',
                        backgroundColor: 'rgba(40, 167, 69, 0.1)',
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Runner utilization chart
            const runnerCtx = document.getElementById('runnerUtilizationChart').getContext('2d');
            runnerUtilizationChart = new Chart(runnerCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Active', 'Inactive', 'Error'],
                    datasets: [{
                        data: [<%= runnerSummary.active || 0 %>, <%= runnerSummary.inactive || 0 %>, <%= runnerSummary.error || 0 %>],
                        backgroundColor: ['#28a745', '#6c757d', '#dc3545']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        // Load dashboard data
        async function loadDashboardData() {
            try {
                await Promise.all([
                    refreshQueue(),
                    refreshRunners(),
                    refreshActiveExecutions(),
                    refreshResourceUtilization(),
                    refreshSystemMetrics()
                ]);
                
                // Update last refresh time
                const now = new Date().toLocaleTimeString();
                console.log(`Dashboard refreshed at ${now}`);
                
            } catch (error) {
                console.error('Error refreshing dashboard:', error);
                showError('Failed to refresh dashboard data');
            }
        }

        // Refresh queue data
        async function refreshQueue() {
            try {
                const response = await fetch('/enhanced-orchestration/api/queue-status');
                const data = await response.json();
                
                updateQueueTable(data.details);
                updateQueueMetrics(data.summary);
                
            } catch (error) {
                console.error('Error refreshing queue:', error);
            }
        }

        // Refresh runner data
        async function refreshRunners() {
            try {
                const response = await fetch('/enhanced-orchestration/api/runner-status');
                const data = await response.json();
                
                updateRunnersList(data.details);
                updateRunnerMetrics(data.summary);
                
            } catch (error) {
                console.error('Error refreshing runners:', error);
            }
        }

        // Refresh active executions
        async function refreshActiveExecutions() {
            try {
                const response = await fetch('/enhanced-orchestration/api/active-executions');
                const data = await response.json();
                
                updateActiveExecutions(data);
                
            } catch (error) {
                console.error('Error refreshing active executions:', error);
            }
        }

        // Refresh resource utilization
        async function refreshResourceUtilization() {
            try {
                const response = await fetch('/enhanced-orchestration/api/resource-utilization');
                const data = await response.json();
                
                updateResourceUtilization(data);
                
            } catch (error) {
                console.error('Error refreshing resource utilization:', error);
            }
        }

        // Refresh system metrics
        async function refreshSystemMetrics() {
            try {
                const response = await fetch('/enhanced-orchestration/api/system-metrics');
                const data = await response.json();
                
                updateSystemMetrics(data);
                
            } catch (error) {
                console.error('Error refreshing system metrics:', error);
            }
        }

        // Update queue table
        function updateQueueTable(queueData) {
            const tbody = document.getElementById('queueTableBody');
            tbody.innerHTML = '';
            
            queueData.forEach(execution => {
                const row = document.createElement('tr');
                row.className = 'execution-row';
                
                row.innerHTML = `
                    <td>
                        <a href="/enhanced-orchestration/execution/${execution.execution_id}" class="text-decoration-none">
                            ${execution.execution_id}
                        </a>
                    </td>
                    <td><span class="badge bg-primary">${execution.test_suite}</span></td>
                    <td><span class="badge bg-secondary">${execution.environment}</span></td>
                    <td>
                        <span class="badge ${getPriorityBadgeClass(execution.priority)}">
                            ${execution.priority}
                        </span>
                    </td>
                    <td><span class="badge ${getStatusBadgeClass(execution.status)}">${execution.status}</span></td>
                    <td>${execution.queue_time_minutes || 0}m</td>
                    <td>
                        ${execution.status === 'queued' || execution.status === 'running' ? 
                            `<button class="btn btn-outline-danger btn-sm" onclick="cancelExecution('${execution.execution_id}')">
                                <i class="bi bi-x-circle"></i>
                            </button>` : ''
                        }
                    </td>
                `;
                
                tbody.appendChild(row);
            });
        }

        // Update runners list
        function updateRunnersList(runnerData) {
            const container = document.getElementById('runnersList');
            container.innerHTML = '';
            
            runnerData.forEach(runner => {
                const runnerDiv = document.createElement('div');
                runnerDiv.className = 'mb-3 p-3 border rounded';
                
                runnerDiv.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <strong>
                            <a href="/enhanced-orchestration/runner/${runner.id}" class="text-decoration-none">
                                ${runner.name}
                            </a>
                        </strong>
                        <span class="badge ${getRunnerStatusBadgeClass(runner.status)}">${runner.status}</span>
                    </div>
                    <div class="small text-muted mb-2">
                        <i class="bi bi-gear"></i> ${runner.type} | 
                        <i class="bi bi-heart${runner.health_status === 'healthy' ? '-fill text-success' : ' text-danger'}"></i> ${runner.health_status}
                    </div>
                    <div class="progress mb-2" style="height: 6px;">
                        <div class="progress-bar ${runner.utilization_percent > 80 ? 'bg-danger' : runner.utilization_percent > 60 ? 'bg-warning' : 'bg-success'}" 
                             style="width: ${runner.utilization_percent || 0}%"></div>
                    </div>
                    <small class="text-muted">
                        ${runner.current_jobs}/${runner.max_concurrent_jobs} jobs (${runner.utilization_percent || 0}%)
                    </small>
                `;
                
                container.appendChild(runnerDiv);
            });
        }

        // Update active executions
        function updateActiveExecutions(data) {
            // Update regular executions
            const regularContainer = document.getElementById('regularExecutions');
            regularContainer.innerHTML = '';
            
            if (data.regular && data.regular.length > 0) {
                data.regular.forEach(execution => {
                    const div = document.createElement('div');
                    div.className = 'mb-2 p-2 border rounded';
                    div.innerHTML = `
                        <div class="fw-bold">${execution.execution_id}</div>
                        <div class="small">
                            <span class="badge bg-primary">${execution.test_suite}</span>
                            <span class="badge bg-secondary">${execution.environment}</span>
                            on ${execution.runner_name || 'Unknown'}
                        </div>
                        <div class="small text-muted">Runtime: ${execution.runtime_minutes || 0}m</div>
                    `;
                    regularContainer.appendChild(div);
                });
            } else {
                regularContainer.innerHTML = '<div class="text-muted">No active regular executions</div>';
            }
            
            // Update parallel executions
            const parallelContainer = document.getElementById('parallelExecutions');
            parallelContainer.innerHTML = '';
            
            if (data.parallel && data.parallel.length > 0) {
                data.parallel.forEach(execution => {
                    const div = document.createElement('div');
                    div.className = 'mb-2 p-2 border rounded';
                    div.innerHTML = `
                        <div class="fw-bold">${execution.parent_execution_id}</div>
                        <div class="progress mb-1" style="height: 6px;">
                            <div class="progress-bar bg-success" style="width: ${(execution.completed_shards / execution.total_shards) * 100}%"></div>
                            <div class="progress-bar bg-danger" style="width: ${(execution.failed_shards / execution.total_shards) * 100}%"></div>
                        </div>
                        <div class="small">
                            ${execution.completed_shards}/${execution.total_shards} completed
                            ${execution.failed_shards > 0 ? `, ${execution.failed_shards} failed` : ''}
                        </div>
                    `;
                    parallelContainer.appendChild(div);
                });
            } else {
                parallelContainer.innerHTML = '<div class="text-muted">No active parallel executions</div>';
            }
        }

        // Update resource utilization
        function updateResourceUtilization(data) {
            const container = document.getElementById('resourceUtilization');
            container.innerHTML = '';
            
            if (data && data.length > 0) {
                data.forEach(runner => {
                    const div = document.createElement('div');
                    div.className = 'row mb-3 p-3 border rounded';
                    
                    const cpuPercent = runner.total_cpu_allocated > 0 ? (runner.total_cpu_allocated / 100) * 100 : 0;
                    const memoryPercent = runner.total_memory_allocated > 0 ? Math.min((runner.total_memory_allocated / 8192) * 100, 100) : 0;
                    
                    div.innerHTML = `
                        <div class="col-md-3">
                            <strong>${runner.runner_name}</strong>
                            <div class="small text-muted">${runner.runner_type}</div>
                        </div>
                        <div class="col-md-3">
                            <div class="small text-muted">CPU Allocation</div>
                            <div class="progress" style="height: 20px;">
                                <div class="progress-bar ${cpuPercent > 80 ? 'bg-danger' : cpuPercent > 60 ? 'bg-warning' : 'bg-success'}" 
                                     style="width: ${cpuPercent}%">${runner.total_cpu_allocated}%</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="small text-muted">Memory Allocation</div>
                            <div class="progress" style="height: 20px;">
                                <div class="progress-bar ${memoryPercent > 80 ? 'bg-danger' : memoryPercent > 60 ? 'bg-warning' : 'bg-success'}" 
                                     style="width: ${memoryPercent}%">${runner.total_memory_allocated}MB</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="small text-muted">Active Jobs</div>
                            <div class="fs-6">${runner.current_jobs}/${runner.max_concurrent_jobs}</div>
                        </div>
                    `;
                    
                    container.appendChild(div);
                });
            } else {
                container.innerHTML = '<div class="text-muted">No resource utilization data available</div>';
            }
        }

        // Update system metrics
        function updateSystemMetrics(data) {
            if (data.executions_24h !== undefined) {
                document.getElementById('executions24h').textContent = data.executions_24h;
            }
        }

        // Update queue metrics
        function updateQueueMetrics(summary) {
            if (summary.total_queued !== undefined) {
                document.getElementById('queuedExecutions').textContent = summary.total_queued;
            }
        }

        // Update runner metrics
        function updateRunnerMetrics(summary) {
            if (summary.active !== undefined) {
                document.getElementById('activeRunners').textContent = summary.active;
            }
            if (summary.total_active_jobs !== undefined) {
                document.getElementById('activeJobs').textContent = summary.total_active_jobs;
            }
        }

        // Utility functions for badge classes
        function getStatusBadgeClass(status) {
            const classes = {
                'queued': 'bg-warning',
                'assigned': 'bg-info',
                'running': 'bg-primary',
                'completed': 'bg-success',
                'failed': 'bg-danger',
                'cancelled': 'bg-secondary'
            };
            return classes[status] || 'bg-secondary';
        }

        function getPriorityBadgeClass(priority) {
            if (priority >= 80) return 'bg-danger';
            if (priority >= 60) return 'bg-warning';
            return 'bg-info';
        }

        function getRunnerStatusBadgeClass(status) {
            const classes = {
                'active': 'bg-success',
                'inactive': 'bg-secondary',
                'error': 'bg-danger',
                'maintenance': 'bg-warning'
            };
            return classes[status] || 'bg-secondary';
        }

        // Control functions
        async function cancelExecution(executionId) {
            if (!confirm(`Are you sure you want to cancel execution ${executionId}?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/enhanced-orchestration/api/execution/${executionId}/cancel`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    showSuccess('Execution cancelled successfully');
                    refreshQueue();
                } else {
                    const error = await response.json();
                    showError(error.error || 'Failed to cancel execution');
                }
            } catch (error) {
                console.error('Error cancelling execution:', error);
                showError('Failed to cancel execution');
            }
        }

        // Notification functions
        function showSuccess(message) {
            // Simple toast notification - you can enhance this with a proper toast library
            const toast = document.createElement('div');
            toast.className = 'toast align-items-center text-white bg-success border-0 position-fixed top-0 end-0 m-3';
            toast.style.zIndex = '9999';
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" onclick="this.closest('.toast').remove()"></button>
                </div>
            `;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 5000);
        }

        function showError(message) {
            const toast = document.createElement('div');
            toast.className = 'toast align-items-center text-white bg-danger border-0 position-fixed top-0 end-0 m-3';
            toast.style.zIndex = '9999';
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" onclick="this.closest('.toast').remove()"></button>
                </div>
            `;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 5000);
        }
    </script>
</body>
</html>