#!/usr/bin/env node

/**
 * Jira Integration Setup Script
 * 
 * This script helps users set up the Jira integration quickly
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupJiraIntegration() {
  console.log('üé≠ Jira Integration Setup for Playwright Tests\n');
  console.log('This script will help you configure Jira integration for automatic test failure reporting.\n');

  try {
    // Check if .env.jira already exists
    if (fs.existsSync('.env.jira')) {
      const overwrite = await question('‚ö†Ô∏è  .env.jira file already exists. Overwrite? (y/N): ');
      if (overwrite.toLowerCase() !== 'y') {
        console.log('Setup cancelled.');
        rl.close();
        return;
      }
    }

    console.log('üìù Please provide your Jira configuration:\n');

    // Collect Jira configuration
    const jiraUrl = await question('üîó Jira URL (e.g., https://company.atlassian.net): ');
    const username = await question('üë§ Username/Email: ');
    const apiToken = await question('üîë API Token: ');
    const projectKey = await question('üìÅ Project Key (e.g., TEST): ');

    console.log('\n‚öôÔ∏è  Optional configuration (press Enter to use defaults):\n');

    const issueType = await question('üêõ Issue Type (default: Bug): ') || 'Bug';
    const enabled = await question('‚úÖ Enable Jira reporting? (Y/n): ');
    const enabledValue = enabled.toLowerCase() !== 'n' ? 'true' : 'false';

    // Generate .env.jira file
    const envContent = `# Jira Integration Configuration for Test Reporting
# Generated by setup script on ${new Date().toISOString()}

# Basic Jira Configuration
JIRA_URL=${jiraUrl}
JIRA_USERNAME=${username}
JIRA_API_TOKEN=${apiToken}
JIRA_PROJECT_KEY=${projectKey}

# Feature Toggles
JIRA_ENABLED=${enabledValue}

# Issue Configuration
JIRA_ISSUE_TYPE=${issueType}
JIRA_PRIORITY_HIGH_RETRY_THRESHOLD=2

# Reporter Configuration
JIRA_CREATE_ISSUE_ON_FAILURE=true
JIRA_CREATE_ISSUE_ON_TIMEOUT=true
JIRA_CREATE_ISSUE_ON_RETRY=false
JIRA_ATTACH_SCREENSHOTS=true
JIRA_ATTACH_TRACES=true
JIRA_ATTACH_VIDEOS=true

# Optional: Custom Fields (adjust based on your Jira configuration)
# JIRA_CUSTOM_FIELD_ENVIRONMENT=customfield_10001
# JIRA_CUSTOM_FIELD_TEST_TYPE=customfield_10002
`;

    fs.writeFileSync('.env.jira', envContent);
    console.log('\n‚úÖ Configuration saved to .env.jira');

    // Update .gitignore
    const gitignorePath = '.gitignore';
    let gitignoreContent = '';
    
    if (fs.existsSync(gitignorePath)) {
      gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
    }

    if (!gitignoreContent.includes('.env.jira')) {
      gitignoreContent += '\n# Jira integration secrets\n.env.jira\n';
      fs.writeFileSync(gitignorePath, gitignoreContent);
      console.log('‚úÖ Added .env.jira to .gitignore');
    }

    console.log('\nüß™ Testing connection...');
    
    // Test the connection
    const { testJiraIntegration } = require('./test-jira-integration');
    await testJiraIntegration();

    console.log('\nüéâ Setup complete! You can now run tests with Jira integration:');
    console.log('   npm run test:jira');
    console.log('   npm run test:jira:headed');
    console.log('\nüìö For more information, see JIRA_INTEGRATION.md');

  } catch (error) {
    console.error('\n‚ùå Setup failed:', error.message);
  } finally {
    rl.close();
  }
}

// Handle command line execution
if (require.main === module) {
  setupJiraIntegration().catch(console.error);
}

module.exports = { setupJiraIntegration };
